import os
import cv2
import numpy as np
from ultralytics import YOLO
import supervision as sv
# from paddleocr import PaddleOCR
from config import _util
# import easyocr
# Initialize the OCR reader
# reader = easyocr.Reader(["en"], gpu=False)
# ocr = PaddleOCR(lang="en", rec_algorithm="CRNN")

def detect_objects(frame, model, conf=0.1, iou=0.5):
    """
    Nh·∫≠n di·ªán v·∫≠t th·ªÉ tr√™n khung h√¨nh hi·ªán t·∫°i.
    Args:
    - frame: Khung h√¨nh hi·ªán t·∫°i t·ª´ video.
    - model: M√¥ h√¨nh YOLO ƒë√£ ƒë∆∞·ª£c t·∫£i.

    Returns:
    - detections: K·∫øt qu·∫£ nh·∫≠n di·ªán.
    """
    # results = model(frame)[0]
    results = model.predict(frame, conf=conf, iou=iou)[0]
    detections = sv.Detections.from_ultralytics(results)
    return detections


# def deskew_image(image, angle_threshold=7, max_rotation=7):
#     """
#     C√¢n ch·ªânh ·∫£nh n·∫øu g√≥c nghi√™ng l·ªõn h∆°n m·ªôt ng∆∞·ª°ng nh·∫•t ƒë·ªãnh,
#     nh∆∞ng lu√¥n xoay ph·∫£i (c√πng chi·ªÅu kim ƒë·ªìng h·ªì) v√† gi·ªõi h·∫°n g√≥c xoay t·ªëi ƒëa 5 ƒë·ªô.

#     Args:
#         image (numpy.ndarray): ·∫¢nh ƒë·∫ßu v√†o (grayscale ho·∫∑c binary).
#         angle_threshold (int): Ng∆∞·ª°ng ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ xoay ·∫£nh hay kh√¥ng.
#         max_rotation (int): Gi·ªõi h·∫°n g√≥c xoay t·ªëi ƒëa (m·∫∑c ƒë·ªãnh 5 ƒë·ªô).

#     Returns:
#         numpy.ndarray: ·∫¢nh ƒë√£ ƒë∆∞·ª£c xoay ho·∫∑c gi·ªØ nguy√™n n·∫øu kh√¥ng c·∫ßn thi·∫øt.
#     """
#     coords = np.column_stack(np.where(image > 0))  # L·∫•y t·ªça ƒë·ªô c·ªßa pixel c√≥ gi√° tr·ªã
#     rect = cv2.minAreaRect(coords)  # L·∫•y h√¨nh ch·ªØ nh·∫≠t nh·ªè nh·∫•t ch·ª©a to√†n b·ªô ch·ªØ
#     angle = rect[-1]  # L·∫•y g√≥c nghi√™ng c·ªßa ·∫£nh

#     # Ch·ªânh l·∫°i g√≥c v·ªÅ kho·∫£ng h·ª£p l√Ω
#     if angle < -45:
#         angle = -(90 + angle)
#     else:
#         angle = -angle

#     # N·∫øu g√≥c nh·ªè h∆°n ng∆∞·ª°ng `angle_threshold`, gi·ªØ nguy√™n ·∫£nh
#     if abs(angle) < angle_threshold:
#         print(f"‚ö° ·∫¢nh ƒë√£ th·∫≥ng (g√≥c {angle:.2f} ƒë·ªô), kh√¥ng c·∫ßn xoay.")
#         return image

#     # Gi·ªõi h·∫°n g√≥c xoay t·ªëi ƒëa v√† ƒë·∫£m b·∫£o lu√¥n xoay ph·∫£i (c√πng chi·ªÅu kim ƒë·ªìng h·ªì)
#     if angle > 0:
#         angle = min(angle, max_rotation)  # Xoay ph·∫£i t·ªëi ƒëa 5 ƒë·ªô
#     else:
#         angle = -min(abs(angle), max_rotation)  # Gi·ªØ h∆∞·ªõng xoay ph·∫£i

#     print(f"üîÑ Xoay ·∫£nh {angle:.2f} ƒë·ªô theo chi·ªÅu kim ƒë·ªìng h·ªì.")

#     # Xoay ·∫£nh theo chi·ªÅu kim ƒë·ªìng h·ªì
#     (h, w) = image.shape[:2]
#     center = (w // 2, h // 2)
#     M = cv2.getRotationMatrix2D(center, abs(angle), 1.0)  # Xoay theo chi·ªÅu kim ƒë·ªìng h·ªì
#     rotated = cv2.warpAffine(
#         image, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE
#     )

#     return rotated


def detect_image(img_path):
    frame = cv2.imread(img_path)
    if frame is None:
        raise ValueError(f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n: {img_path}")
    output_folder = "./file_path/cropped_license_plates"
    detect_license_plate = YOLO("./model/train/checkpoints/train/weights/best.pt")

    license_plates = detect_objects(frame, detect_license_plate, conf=0.1, iou=0.5)

    for license_plate_index, license_plate in enumerate(license_plates):
        xyxy_car, _, conf_license, class_id_license, _, _ = license_plate
        x1_license, y1_license, x2_license, y2_license = (
            xyxy_car[0],
            xyxy_car[1],
            xyxy_car[2],
            xyxy_car[3],
        )

        # Crop license plate
        license_plate_crop = frame[
            int(y1_license) : int(y2_license), int(x1_license) : int(x2_license), :
        ]
        # print("\nlicense_plate_crop: ", license_plate_crop)

        license_plate_crop_gray = cv2.cvtColor(license_plate_crop, cv2.COLOR_BGR2GRAY)
        # print("\nlicense_plate_crop: ", license_plate_crop_gray)
        # license_plate_crop_gray = deskew_image(license_plate_crop_gray)
        # # L∆∞u ·∫£nh bi·ªÉn s·ªë xe ƒë√£ c·∫Øt v√†o folder
        file_name = f"frame_plate_{license_plate_index}.png"
        save_path = os.path.join(output_folder, file_name)
        cv2.imwrite(save_path, license_plate_crop_gray)
        print(f"Saved cropped license plate: {save_path}")

        license_plate_text, license_plate_text_score = _util.read_license_plate_motobike(
            license_plate_crop_gray
        )
        print("license_plate_crop_thresh: ", license_plate_text)
        print("\nlicense_plate_text_score: ", license_plate_text_score)

    return license_plate_text, license_plate_text_score

# Ch·∫°y ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    detect_image("./file_path/cropped_license_plates_1/frame_24_plate_158.png")
